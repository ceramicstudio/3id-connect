{"version":3,"sources":["constants.ts","idx.ts","hooks.ts","theme.ts","images/avatar-placeholder.png","IdentitiesList.tsx","App.tsx","index.tsx"],"names":["TEST_PROVIDED_DATA","dids","linkToDID","ceramic","Ceramic","idx","IDX","loadProfile","did","a","get","selectCover","options","height","width","selected","option","size","selectContain","getImageSrc","sources","dimensions","mode","alternative","Array","isArray","alternatives","original","selectImageSource","src","replace","injected","InjectedConnector","supportedChainIds","useProvidedData","useState","data","setData","useEffect","listener","event","origin","window","addEventListener","removeEventListener","CHAIN_IDS","toChainId","id","namespace","reference","toString","BRAND_COLOR","theme","global","colors","brand","focus","text","control","border","color","anchor","fontWeight","button","radius","IdentityItem","accounts","profile","providedData","web3","useWeb3React","activate","error","accountId","setAccountId","handleAccount","providedAddress","providedChainId","Promise","all","getAccount","getChainId","address","chainId","AccountID","console","warn","connect","useCallback","then","err","ethereum","on","handleChainChanged","handleAccountsChanged","length","undefined","handleNetworkChanged","networkId","removeListener","useEthereumAccount","ethereumAccount","connectEthereum","avatarSrc","useMemo","image","avatarPlaceholder","hasConnectedAccount","displayAccounts","map","account","isConnectedAccount","Text","Button","disabled","onClick","library","createLink","link","log","plain","weight","Box","margin","bottom","round","direction","gap","pad","Avatar","flex","name","side","IdentitiesList","items","Object","entries","alignSelf","Heading","textAlign","getLibrary","provider","EthereumAuthProvider","selectedAddress","App","provided","handleProvided","useRef","currentHandle","current","newData","reduce","acc","entry","useDIDsData","list","Grommet","full","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9cd50bfa.chunk.js","sourcesContent":["export const CERAMIC_URL = 'https://ceramic-clay.3boxlabs.com' // 'http://localhost:7007'\n\nexport const CONNECT_ORIGIN = 'http://localhost:3000' // 'https://app.3idconnect.org'\n\nexport const IPFS_API_URL = 'https://ipfs.infura.io:5001/api/v0'\nexport const IPFS_URL = 'https://ipfs.infura.io/ipfs/'\nexport const IPFS_PREFIX = 'ipfs://'\n\nexport const TEST_PROVIDED_DATA = {\n  dids: {\n    'did:3:kjzl6cwe1jw14bjz38e4myqcf7eeoqfb1wwdtaqcxx527o9oxfuel1on7reg83x': [\n      '0xea8b36116ff496db2e47970cca7d98dd02c1c5a4@eip155:1',\n    ],\n  },\n  linkToDID:\n    'did:3:kjzl6cwe1jw14aheres4u4grnspw7dovil4qcnxr567jvwhp3ovjdrn5kxh7544',\n}\n","import Ceramic from '@ceramicnetwork/http-client'\nimport { IDX } from '@ceramicstudio/idx'\nimport type {\n  BasicProfile,\n  ImageMetadata,\n  ImageSources,\n} from '@ceramicstudio/idx-constants'\n\nimport { CERAMIC_URL, IPFS_PREFIX, IPFS_URL } from './constants'\n\nexport type Dimensions = { height: number; width: number }\nexport type SizeMode = 'contain' | 'cover'\n\nconst ceramic = new Ceramic(CERAMIC_URL)\nexport const idx = new IDX({ ceramic })\n\nexport async function loadProfile(did: string): Promise<BasicProfile | null> {\n  try {\n    return await idx.get('basicProfile', did)\n  } catch (err) {\n    return null\n  }\n}\n\nexport function formatDID(did: string): string {\n  return did.length <= 20 ? did : `${did.slice(0, 10)}...${did.slice(-6, -1)}`\n}\n\nfunction selectCover(\n  options: Array<ImageMetadata>,\n  { height, width }: Dimensions,\n): ImageMetadata | null {\n  let selected: ImageMetadata | null = null\n  for (const option of options) {\n    if (\n      option.height >= height &&\n      option.width >= width &&\n      (selected === null ||\n        (selected.size != null &&\n          option.size != null &&\n          option.size < selected.size) ||\n        option.height * option.width < selected.height * selected.width)\n    ) {\n      selected = option\n    }\n  }\n  return selected\n}\n\nfunction selectContain(\n  options: Array<ImageMetadata>,\n  { height, width }: Dimensions,\n): ImageMetadata | null {\n  let selected: ImageMetadata | null = null\n  for (const option of options) {\n    if (\n      option.height <= height &&\n      option.width <= width &&\n      (selected === null ||\n        (selected.size != null &&\n          option.size != null &&\n          option.size < selected.size) ||\n        option.height * option.width > selected.height * selected.width)\n    ) {\n      selected = option\n    }\n  }\n  return selected\n}\n\nexport function selectImageSource(\n  sources: ImageSources,\n  dimensions: Dimensions,\n  mode: SizeMode = 'cover',\n): ImageMetadata {\n  let alternative: ImageMetadata | null = null\n  if (Array.isArray(sources.alternatives)) {\n    alternative =\n      mode === 'cover'\n        ? selectCover(sources.alternatives, dimensions)\n        : selectContain(sources.alternatives, dimensions)\n  }\n  return alternative ?? sources.original\n}\n\nexport function toImageSrc(image: ImageMetadata): string {\n  return image.src.replace(IPFS_PREFIX, IPFS_URL)\n}\n\nexport function getImageSrc(\n  sources: ImageSources,\n  dimensions: Dimensions,\n  mode?: SizeMode,\n) {\n  return toImageSrc(selectImageSource(sources, dimensions, mode))\n}\n","import { useWeb3React } from '@web3-react/core'\nimport { InjectedConnector } from '@web3-react/injected-connector'\nimport { AccountID } from 'caip'\nimport type { ChainIDParams } from 'caip'\nimport { useCallback, useEffect, useRef, useState } from 'react'\n\nimport { CONNECT_ORIGIN, TEST_PROVIDED_DATA } from './constants'\nimport { loadProfile } from './idx'\nimport type { DIDsData, ProvidedData } from './types'\n\nconst injected = new InjectedConnector({ supportedChainIds: [1, 3, 4, 5, 42] })\n\nexport function useProvidedData(): ProvidedData | null {\n  const [data, setData] = useState<ProvidedData | null>(null)\n\n  useEffect(() => {\n    setData(TEST_PROVIDED_DATA)\n\n    function listener(event: MessageEvent) {\n      if (event.origin !== CONNECT_ORIGIN) {\n        return\n      }\n\n      // TODO: try to parse and set data\n    }\n    window.addEventListener('message', listener, false)\n\n    return () => {\n      window.removeEventListener('message', listener)\n    }\n  }, [])\n\n  return data\n}\n\nexport function useDIDsData(): DIDsData | null {\n  const provided = useProvidedData()\n  const [data, setData] = useState<DIDsData>({})\n  const handleProvided = useRef(0)\n\n  function handler() {\n    if (provided !== null) {\n      const currentHandle = ++handleProvided.current\n      Promise.all(\n        Object.entries(provided.dids).map(async ([did, accounts]) => ({\n          did,\n          accounts: accounts.map((account) => new AccountID(account)),\n          profile: await loadProfile(did),\n        })),\n      ).then((entries) => {\n        if (currentHandle === handleProvided.current) {\n          const newData = entries.reduce((acc, { did, ...entry }) => {\n            acc[did] = entry\n            return acc\n          }, {} as DIDsData)\n          setData(newData)\n        }\n      })\n    }\n  }\n  useEffect(handler, [provided])\n\n  return data\n}\n\nconst CHAIN_IDS: Record<string, string> = {\n  // Mainnet\n  '0x01': '1',\n  '0x1': '1',\n  // Ropsten\n  '0x03': '3',\n  '0x3': '3',\n  // Rinkeby\n  '0x04': '4',\n  '0x4': '4',\n  // Goerli\n  '0x05': '5',\n  '0x5': '5',\n  // Kovan\n  '0x2a': '42',\n}\n\nfunction toChainId(id: ChainIDParams | string | number): ChainIDParams {\n  return typeof id === 'object'\n    ? id\n    : {\n        namespace: 'eip155',\n        reference: typeof id === 'number' ? id.toString() : CHAIN_IDS[id] || id,\n      }\n}\n\nexport function useEthereumAccount(): [\n  AccountID | undefined,\n  () => Promise<void>,\n] {\n  const { activate, error } = useWeb3React()\n  const [accountId, setAccountId] = useState<AccountID>()\n\n  async function handleAccount(\n    providedAddress?: string,\n    providedChainId?: ChainIDParams | string | number,\n  ) {\n    try {\n      const [address, chainId] = await Promise.all([\n        providedAddress ?? injected.getAccount(),\n        providedChainId ?? injected.getChainId(),\n      ])\n      if (address != null) {\n        const id = new AccountID({ address, chainId: toChainId(chainId) })\n        setAccountId(id)\n      }\n    } catch (err) {\n      console.warn('Failed to handle setting accountId', err)\n    }\n  }\n\n  const connect = useCallback(() => {\n    return activate(injected).then(\n      () => handleAccount(),\n      (err) => {\n        console.warn('Failed to handle activation on connect', err)\n      },\n    )\n  }, [activate])\n\n  useEffect(() => {\n    const { ethereum } = window as any\n    if (ethereum != null && typeof ethereum.on === 'function' && !error) {\n      const handleChainChanged = (chainId: string | number) => {\n        activate(injected).then(\n          () => handleAccount(accountId?.address, chainId),\n          (err) => {\n            console.warn('Failed to handle activation on chain changed', err)\n          },\n        )\n      }\n\n      const handleAccountsChanged = (accounts: string[]) => {\n        if (accounts.length > 0) {\n          activate(injected).then(\n            () =>\n              handleAccount(\n                accounts[0],\n                accountId?.chainId\n                  ? toChainId(accountId.chainId.toString())\n                  : undefined,\n              ),\n            (err) => {\n              console.warn(\n                'Failed to handle activation on accounts changed',\n                err,\n              )\n            },\n          )\n        }\n      }\n\n      const handleNetworkChanged = (networkId: string | number) => {\n        activate(injected).then(\n          () => {\n            if (accountId == null) {\n              handleAccount()\n            }\n          },\n          (err) => {\n            console.warn('Failed to handle activation on accounts changed', err)\n          },\n        )\n      }\n\n      ethereum.on('connect', connect)\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n      ethereum.on('networkChanged', handleNetworkChanged)\n\n      return () => {\n        if (typeof ethereum.removeListener === 'function') {\n          ethereum.removeListener('connect', connect)\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n          ethereum.removeListener('networkChanged', handleNetworkChanged)\n        }\n      }\n    }\n  }, [accountId, activate, connect, error])\n\n  return [accountId, connect]\n}\n","import type { ThemeType } from 'grommet'\n\nexport const BRAND_COLOR = '#FC1591'\nexport const ACCENT_COLOR = 'rgba(252, 21, 145, 0.1)'\nexport const PLACEHOLDER_COLOR = '#949494'\n\nexport const theme: ThemeType = {\n  global: {\n    colors: {\n      brand: BRAND_COLOR,\n      focus: BRAND_COLOR,\n      text: '#181817',\n      'accent-1': ACCENT_COLOR,\n      'neutral-1': '#757575',\n      'neutral-2': '#888888',\n      'neutral-3': '#909090',\n      'neutral-4': '#A8A8A8',\n      'neutral-5': '#D8D8D8',\n      'neutral-6': '#F7F7F7',\n    },\n    control: {\n      border: {\n        color: 'neutral-5',\n      },\n    },\n  },\n  anchor: {\n    fontWeight: 400,\n  },\n  button: {\n    border: {\n      radius: '5px',\n    },\n  },\n  // text: {\n  //   medium: {\n  //     size: '18px',\n  //   },\n  // },\n}\n","export default __webpack_public_path__ + \"static/media/avatar-placeholder.384fcdf7.png\";","import type { EthereumAuthProvider } from '@ceramicnetwork/blockchain-utils-linking'\nimport { useWeb3React } from '@web3-react/core'\nimport { Avatar, Box, Button, Heading, Text } from 'grommet'\nimport { useMemo } from 'react'\n\nimport avatarPlaceholder from './images/avatar-placeholder.png'\n\nimport { useEthereumAccount, useProvidedData } from './hooks'\nimport { getImageSrc } from './idx'\nimport type { DIDData, DIDsData } from './types'\n\ntype ItemProps = {\n  data: DIDData\n  did: string\n}\n\nfunction IdentityItem({ data, did }: ItemProps) {\n  const { accounts, profile } = data\n\n  const providedData = useProvidedData()\n  const web3 = useWeb3React<EthereumAuthProvider>()\n  const [ethereumAccount, connectEthereum] = useEthereumAccount()\n\n  const avatarSrc = useMemo(() => {\n    return profile?.image\n      ? getImageSrc(profile.image, { height: 65, width: 65 })\n      : avatarPlaceholder\n  }, [profile])\n\n  let hasConnectedAccount = false\n  const displayAccounts = accounts.map((account) => {\n    const isConnectedAccount = account.address === ethereumAccount?.address\n    hasConnectedAccount = hasConnectedAccount || isConnectedAccount\n\n    return (\n      <Text\n        key={account.address}\n        color={isConnectedAccount ? 'brand' : 'neutral-3'}>\n        {account.address}\n      </Text>\n    )\n  })\n\n  const button = ethereumAccount ? (\n    <Button\n      disabled={!hasConnectedAccount}\n      onClick={() => {\n        if (providedData != null) {\n          web3.library?.createLink(providedData.linkToDID).then(\n            (link) => {\n              console.log('created link', link)\n            },\n            (err) => {\n              console.log('failed to create link', err)\n            },\n          )\n        }\n      }}\n      plain>\n      <Text color={hasConnectedAccount ? 'brand' : 'neutral-4'} weight=\"bold\">\n        Use this account\n      </Text>\n    </Button>\n  ) : (\n    <Button\n      onClick={() => {\n        connectEthereum()\n      }}\n      plain>\n      <Text color=\"brand\" weight=\"bold\">\n        Connect this account\n      </Text>\n    </Button>\n  )\n\n  return (\n    <Box\n      border={{ color: 'neutral-5' }}\n      margin={{ bottom: 'medium' }}\n      round=\"small\">\n      <Box direction=\"row\" gap=\"small\" pad=\"medium\">\n        <Avatar size=\"65px\" src={avatarSrc} />\n        <Box flex>\n          <Text weight=\"bold\">{profile?.name ?? '(no name)'}</Text>\n          <Text color=\"neutral-4\">{did}</Text>\n        </Box>\n        <Box>{button}</Box>\n      </Box>\n      <Box border={{ color: 'neutral-5', side: 'top' }} pad=\"medium\">\n        {displayAccounts}\n      </Box>\n    </Box>\n  )\n}\n\nexport type Props = {\n  dids: DIDsData\n}\n\nexport default function IdentitiesList({ dids }: Props) {\n  const items = Object.entries(dids).map(([did, data]) => (\n    <IdentityItem key={did} data={data} did={did} />\n  ))\n\n  return (\n    <Box alignSelf=\"center\" margin=\"large\" width=\"large\">\n      <Heading textAlign=\"center\">Choose an identity</Heading>\n      {items}\n    </Box>\n  )\n}\n","import { EthereumAuthProvider } from '@ceramicnetwork/blockchain-utils-linking'\nimport { Web3ReactProvider } from '@web3-react/core'\nimport { Box, Grommet, Text } from 'grommet'\n\nimport { useDIDsData } from './hooks'\nimport { theme } from './theme'\n\nimport IdentitiesList from './IdentitiesList'\n\nfunction getLibrary(provider: any): EthereumAuthProvider {\n  return new EthereumAuthProvider(provider, provider.selectedAddress)\n}\n\nexport default function App() {\n  const data = useDIDsData()\n  const list = data ? <IdentitiesList dids={data} /> : <Text>Loading</Text>\n\n  return (\n    <Grommet full theme={theme}>\n      <Web3ReactProvider getLibrary={getLibrary}>\n        <Box>{list}</Box>\n      </Web3ReactProvider>\n    </Grommet>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}